// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// EuclDist2D
double EuclDist2D(arma::rowvec x, arma::rowvec y);
RcppExport SEXP _GLoSS_EuclDist2D(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(EuclDist2D(x, y));
    return rcpp_result_gen;
END_RCPP
}
// krig
arma::mat krig(arma::mat beta, arma::mat R0, arma::mat R1, arma::mat Rmix0, arma::mat Rmix1, arma::mat Rnew0, arma::mat Rnew1, arma::vec delta, arma::vec mu);
RcppExport SEXP _GLoSS_krig(SEXP betaSEXP, SEXP R0SEXP, SEXP R1SEXP, SEXP Rmix0SEXP, SEXP Rmix1SEXP, SEXP Rnew0SEXP, SEXP Rnew1SEXP, SEXP deltaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R1(R1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rmix0(Rmix0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rmix1(Rmix1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rnew0(Rnew0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rnew1(Rnew1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(krig(beta, R0, R1, Rmix0, Rmix1, Rnew0, Rnew1, delta, mu));
    return rcpp_result_gen;
END_RCPP
}
// krig_gamma
arma::mat krig_gamma(arma::mat beta, arma::mat R0, arma::mat Rmix0, arma::mat Rnew0, arma::vec mu);
RcppExport SEXP _GLoSS_krig_gamma(SEXP betaSEXP, SEXP R0SEXP, SEXP Rmix0SEXP, SEXP Rnew0SEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rmix0(Rmix0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rnew0(Rnew0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(krig_gamma(beta, R0, Rmix0, Rnew0, mu));
    return rcpp_result_gen;
END_RCPP
}
// gloss
Rcpp::List gloss(arma::vec y, arma::mat X, Rcpp::List hyper, int R, int B, int Trace);
RcppExport SEXP _GLoSS_gloss(SEXP ySEXP, SEXP XSEXP, SEXP hyperSEXP, SEXP RSEXP, SEXP BSEXP, SEXP TraceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hyper(hyperSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type Trace(TraceSEXP);
    rcpp_result_gen = Rcpp::wrap(gloss(y, X, hyper, R, B, Trace));
    return rcpp_result_gen;
END_RCPP
}
// closs
Rcpp::List closs(arma::vec y, arma::mat X, Rcpp::List hyper, int R, int B, int Trace);
RcppExport SEXP _GLoSS_closs(SEXP ySEXP, SEXP XSEXP, SEXP hyperSEXP, SEXP RSEXP, SEXP BSEXP, SEXP TraceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hyper(hyperSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type Trace(TraceSEXP);
    rcpp_result_gen = Rcpp::wrap(closs(y, X, hyper, R, B, Trace));
    return rcpp_result_gen;
END_RCPP
}
// vloss
Rcpp::List vloss(arma::vec y, arma::mat X, Rcpp::List hyper, int R, int B, int Trace);
RcppExport SEXP _GLoSS_vloss(SEXP ySEXP, SEXP XSEXP, SEXP hyperSEXP, SEXP RSEXP, SEXP BSEXP, SEXP TraceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hyper(hyperSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type Trace(TraceSEXP);
    rcpp_result_gen = Rcpp::wrap(vloss(y, X, hyper, R, B, Trace));
    return rcpp_result_gen;
END_RCPP
}
// spgp
Rcpp::List spgp(arma::vec y, arma::mat X, Rcpp::List hyper, int R, int B, int Trace);
RcppExport SEXP _GLoSS_spgp(SEXP ySEXP, SEXP XSEXP, SEXP hyperSEXP, SEXP RSEXP, SEXP BSEXP, SEXP TraceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hyper(hyperSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type Trace(TraceSEXP);
    rcpp_result_gen = Rcpp::wrap(spgp(y, X, hyper, R, B, Trace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GLoSS_EuclDist2D", (DL_FUNC) &_GLoSS_EuclDist2D, 2},
    {"_GLoSS_krig", (DL_FUNC) &_GLoSS_krig, 9},
    {"_GLoSS_krig_gamma", (DL_FUNC) &_GLoSS_krig_gamma, 5},
    {"_GLoSS_gloss", (DL_FUNC) &_GLoSS_gloss, 6},
    {"_GLoSS_closs", (DL_FUNC) &_GLoSS_closs, 6},
    {"_GLoSS_vloss", (DL_FUNC) &_GLoSS_vloss, 6},
    {"_GLoSS_spgp", (DL_FUNC) &_GLoSS_spgp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_GLoSS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
